import { Component, ViewChild } from '@angular/core';
import { MCSDService          } from '../mcsd.service';
import { Observable           } from 'rxjs';

@Component({
  selector: 'app-files-generation-pdf',
  templateUrl: './files-generation-pdf.component.html',
  styleUrls: ['./files-generation-pdf.component.css']
})
export class FilesGenerationPDFComponent {
  ////////////////////////////////////////////////////////////////
  // PROPERTIES
  ////////////////////////////////////////////////////////////////
  pageTitle            : string = '[GENERAR ARCHIVO PDF]';
  //
  static pageTitle()   : string {
    return '[GENERAR ARCHIVOS PDF]';
  }
  //
  public values       : string = '';
  public DownloadLink : string = '';
  //
  @ViewChild('subjectName') subjectName             : any;
  ////////////////////////////////////////////////////////////////
  // EVENT HANDLERS
  ////////////////////////////////////////////////////////////////
  constructor(private mcsdService: MCSDService)
  {
    //
  }  
  //
  public onSubmit()
  {
      //
      let _subjectName : string = this.subjectName.nativeElement.value;
      //
      let GetPDFUrl!   : Observable<string>;
      //
      GetPDFUrl        = this.mcsdService.GetPDF(_subjectName);
      //
      const pdf_observer = {
        next: (return_data: string)     => { 
          //
          var resultArray = return_data.split("|");
            //
            if (resultArray.length > 0) {
                //
                var fileUrl        = this.mcsdService.prefix + '/output/uploadedfiles/pdf/' + resultArray[1];
                var fileLocalPath  = resultArray[2];
                var imagePath      = resultArray[3];
                //
                let downloadLink_1 = fileUrl;
                //
                while (downloadLink_1.indexOf("\"") > -1) 
                    downloadLink_1 = downloadLink_1.replace("\"", "");
                //
                this.DownloadLink  = this.DebugHostingContent(downloadLink_1);
                //
                console.log("PDF FILENAME  : " + fileUrl);
                //
                console.log("PDF PATH      : " + fileLocalPath);
                //
                console.log("IMAGE PATH    : " + imagePath);
                //
                console.info('[GENERATE PDF FILE] - [Download link] : ' + this.DownloadLink);
          }
        },
        error           : (err: Error)      => {
          //
          console.error('[GENERATE PDF FILE] - Error :' + err);
        },
        complete        : ()                => {
          //
          console.warn('[GENERATE PDF FILE] - COMPLETED ');
        },
    }; 
    //
    GetPDFUrl.subscribe(pdf_observer);
  }
  ////////////////////////////////////////////////////////////////
  // METODOS COMUNES
  ////////////////////////////////////////////////////////////////
  private DebugHostingContent(msg : string) : string {
    //
    console.log("cadena a evaular : " + msg);
    //
    let regEx   = /(.*)(<!--SCRIPT GENERATED BY SERVER! PLEASE REMOVE-->)(.*\w+.*)(<!--SCRIPT GENERATED BY SERVER! PLEASE REMOVE-->)(.*)/;
    //
    var strMsg  = msg.replace(/(\r\n|\n|\r)/gm, "");
    //
    var matches = strMsg.match(regEx);
    //
    if (matches != null) {
        //
        for (var index = 1; index < matches.length; index++) {
            //
            var matchValue = matches[index];
            //        
            console.log("coincidencia : " + matchValue);

            //
            if ((matchValue.indexOf("<!--SCRIPT GENERATED BY SERVER! PLEASE REMOVE-->") != -1) && (matchValue.trim() != "")) {
                //
                strMsg = strMsg.replace(matchValue, "");
                //
                console.log("REEMPLAZANDO. NUEVA CADENA : " + strMsg);
            }

            //
            if ((matchValue.indexOf("<center>") != -1) && (matchValue.trim() != "")) {
                //
                strMsg = strMsg.replace(matchValue, "");
                //
                console.log("REEMPLAZANDO. NUEVA CADENA : " + strMsg);
            }
        }
      }
      else
          console.log("NO_HAY_COINCIDENCIAS");
      //
      console.log("CADENA DEPURADA : " + strMsg);
      //
      strMsg = strMsg.replace("unsafe:", "");
      //
      return strMsg;
  };
}
